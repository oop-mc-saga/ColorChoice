/*
 * ColorPanel.java
 *
 * Created on 2008/11/15, 15:32
 */
package colorChoice;

import java.awt.Color;
import java.util.List;
import java.util.ArrayList;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author tadaki
 */
public class ColorPanel extends javax.swing.JPanel {

    private Color color;
    private final List<ChangeListener> listeners;

    /**
     * Creates new form Colors
     */
    public ColorPanel() {
        initComponents();
        listeners = new ArrayList<>();
        setColor();
        redSlider.addChangeListener(e->fireStateChanged(e));
        greeSlider.addChangeListener(e->fireStateChanged(e));
        blueSlider.addChangeListener(e->fireStateChanged(e));
    }

    /**
     * Get color values from three sliders and set color
     */
    private void setColor() {
        int r = redSlider.getValue();
        int g = greeSlider.getValue();
        int b = blueSlider.getValue();
        color = new Color(r, g, b);
        setLabel(r, g, b);
    }

    private void setLabel(int r, int g, int b) {
        StringBuilder s = new StringBuilder();
        s.append("(").append(r).append(",").append(g).append(",")
                .append(b).append(")");
        StringBuilder h = new StringBuilder();
        h.append("#").append(hexString(r)).append(hexString(g))
                .append(hexString(b));
        label.setText(s.toString() + h.toString());
    }

    private String hexString(int x) {
        if (x < 16) {
            return "0" + Integer.toHexString(x);
        }
        return Integer.toHexString(x);
    }

    public Color getColor() {
        return color;
    }

    /**
     * Add change listener
     *
     * @param listener
     */
    public void addChangeListener(ChangeListener listener) {
        listeners.add(listener);
    }

    /**
     * Notify listeners of event
     *
     * @param e
     */
    protected void fireStateChanged(ChangeEvent e) {
        setColor();
        listeners.forEach(li -> li.stateChanged(e));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        red = new javax.swing.JPanel();
        redSlider = new javax.swing.JSlider();
        green = new javax.swing.JPanel();
        greeSlider = new javax.swing.JSlider();
        blue = new javax.swing.JPanel();
        blueSlider = new javax.swing.JSlider();
        label = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(300, 200));
        setPreferredSize(new java.awt.Dimension(300, 200));
        setLayout(new java.awt.GridBagLayout());

        red.setBackground(new java.awt.Color(255, 0, 0));
        red.setPreferredSize(new java.awt.Dimension(300, 50));

        redSlider.setForeground(new java.awt.Color(0, 0, 0));
        redSlider.setMaximum(255);
        redSlider.setDoubleBuffered(true);
        redSlider.setMaximumSize(new java.awt.Dimension(32767, 50));
        redSlider.setMinimumSize(new java.awt.Dimension(300, 50));
        redSlider.setPreferredSize(new java.awt.Dimension(300, 50));
        red.add(redSlider);

        add(red, new java.awt.GridBagConstraints());

        green.setBackground(new java.awt.Color(0, 255, 0));
        green.setPreferredSize(new java.awt.Dimension(300, 50));

        greeSlider.setMaximum(255);
        greeSlider.setDoubleBuffered(true);
        greeSlider.setMaximumSize(new java.awt.Dimension(32767, 50));
        greeSlider.setMinimumSize(new java.awt.Dimension(300, 50));
        greeSlider.setPreferredSize(new java.awt.Dimension(300, 50));
        green.add(greeSlider);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        add(green, gridBagConstraints);

        blue.setBackground(new java.awt.Color(0, 0, 255));
        blue.setPreferredSize(new java.awt.Dimension(300, 50));

        blueSlider.setMaximum(255);
        blueSlider.setDoubleBuffered(true);
        blueSlider.setMaximumSize(new java.awt.Dimension(32767, 50));
        blueSlider.setMinimumSize(new java.awt.Dimension(300, 50));
        blueSlider.setPreferredSize(new java.awt.Dimension(300, 50));
        blue.add(blueSlider);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        add(blue, gridBagConstraints);

        label.setFont(new java.awt.Font("MS UI Gothic", 0, 18)); // NOI18N
        label.setDoubleBuffered(true);
        label.setPreferredSize(new java.awt.Dimension(20, 200));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        add(label, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel blue;
    private javax.swing.JSlider blueSlider;
    private javax.swing.JSlider greeSlider;
    private javax.swing.JPanel green;
    private javax.swing.JLabel label;
    private javax.swing.JPanel red;
    private javax.swing.JSlider redSlider;
    // End of variables declaration//GEN-END:variables
}
